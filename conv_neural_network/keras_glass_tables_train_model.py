# -*- coding: utf-8 -*-
"""keras_glass_tables_train_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OkbIiP1TxPCXZBOtZZUWtUOZRrPFJsSY
"""

from google.colab import drive

drive.mount("/content/gdrive")  
!pwd

# Commented out IPython magic to ensure Python compatibility.
#put your own path in google drive
# %cd "/content/gdrive/My Drive/Datasets/GlassTable"

from keras.preprocessing.image import ImageDataGenerator
from keras.utils import to_categorical
from keras import layers
from keras import models
from keras import optimizers
from keras.applications import VGG16
import os
import numpy as np


base_dir = 'glass_and_tables_small'
train_dir = os.path.join(base_dir,'train')
validaton_dir = os.path.join(base_dir,'validation')
test_dir = os.path.join(base_dir,'test')

   
train_datagen = ImageDataGenerator(
                  rescale=1./255,
                  rotation_range=40,
                  width_shift_range=0.2,
                  height_shift_range=0.2,
                  shear_range=0.2,
                  zoom_range=0.2,
                  horizontal_flip=True)


val_datagen = ImageDataGenerator(1./255)


train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(150, 150),
                                                    batch_size=20,
                                                    class_mode='binary')

val_generator = val_datagen.flow_from_directory(validaton_dir,
                                                target_size=(150, 150),
                                                batch_size=20,
                                                class_mode='binary')

conv_base = VGG16(weights='imagenet',include_top=False,input_shape=(150,150,3))

model = models.Sequential()
model.add(conv_base)
"""
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
"""
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

conv_base.trainable = False

model.summary()

model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=2e-5),
              metrics=['acc'])

history = model.fit( train_generator,steps_per_epoch=75, epochs=15, validation_data=val_generator,validation_steps=25)

model.save('vgg_glass_and_tables.h5')

import matplotlib.pyplot as plt



acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

test_datagen = ImageDataGenerator(1./255)

test_generator = test_datagen.flow_from_directory(test_dir,
                                                target_size=(150, 150),
                                                batch_size=20,
                                                class_mode='binary')
test_loss,test_acc = model.evaluate_generator(test_generator,steps=25)
print('\ntest acc :\n',test_acc)